rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to get user role
    function getUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() && getUserRole() == 'admin';
    }
    
    // Helper function to check if user is advisor
    function isAdvisor() {
      return isAuthenticated() && getUserRole() == 'advisor';
    }
    
    // Helper function to check if user is subcontractor
    function isSubcontractor() {
      return isAuthenticated() && getUserRole() == 'subcontractor';
    }

    // Users collection - role-based access control
    match /users/{userId} {
      // Users can read/write their own profile
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
      
      // Admins can read/write all user profiles
      allow read, write: if isAdmin();
      
      // Advisors can read subcontractor profiles (for project assignments)
      allow read: if isAdvisor() && resource.data.role == 'subcontractor';
    }
    
    // Projects collection - hierarchical access control
    match /projects/{projectId} {
      // Admins have full access to all projects
      allow read, write: if isAdmin();
      
      // Advisors can read projects they're assigned to
      allow read: if isAdvisor() && resource.data.assignedAdvisorId == request.auth.uid;
      
      // Subcontractors can read projects they're assigned to
      allow read: if isSubcontractor() && 
        request.auth.uid in resource.data.subcontractorIds;
      
      // Prevent unauthorized modifications
      allow write: if false;
    }
    
    // Submissions collection - strict ownership rules
    match /submissions/{submissionId} {
      // Subcontractors can read/write only their own submissions
      allow read, write: if isSubcontractor() && 
        resource.data.subcontractorId == request.auth.uid;
      
      // Subcontractors can create new submissions for themselves
      allow create: if isSubcontractor() && 
        request.resource.data.subcontractorId == request.auth.uid;
      
      // Advisors can read submissions for their assigned projects
      allow read: if isAdvisor() && 
        exists(/databases/$(database)/documents/projects/$(resource.data.projectId)) &&
        get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.assignedAdvisorId == request.auth.uid;
      
      // Admins can read all submissions (for analytics)
      allow read: if isAdmin();
      
      // Prevent editing after submission (MVP business rule)
      allow update: if isSubcontractor() && 
        resource.data.subcontractorId == request.auth.uid &&
        resource.data.status != 'Submitted';
    }
    
    // Annual documents collection - company-level access
    match /annualDocuments/{docId} {
      // Subcontractors can read/write their own annual documents
      allow read, write: if isSubcontractor() && 
        resource.data.subcontractorId == request.auth.uid;
      
      // Subcontractors can create new annual document sets
      allow create: if isSubcontractor() && 
        request.resource.data.subcontractorId == request.auth.uid;
      
      // Admins can read all annual documents
      allow read: if isAdmin();
      
      // Advisors can read annual documents from subcontractors on their projects
      allow read: if isAdvisor() && 
        exists(/databases/$(database)/documents/projects) &&
        resource.data.subcontractorId in get(/databases/$(database)/documents/projects).data.subcontractorIds;
    }
    
    // Deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}